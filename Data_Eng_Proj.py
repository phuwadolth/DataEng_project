import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
st.set_page_config(page_title="Data Engineering Project")
st.title("Elizabeth Data")
st.caption("‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing Values, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel/CSV", type=["xlsx", "csv"])#‡πÉ‡∏´‡πâ uploadfile
if file is not None: #‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô Data fram
    try: #‡∏Å‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πåerror ‡∏Å‡∏£‡∏ì‡∏µ  upload file ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Excel or csv
        if file.name.lower().endswith(".csv"): #‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô csv ‡∏´‡∏£‡∏∑‡∏≠ excel ‡∏°‡∏±‡πâ‡∏¢
            df = pd.read_csv(file,encoding="utf-8-sig") #encoding="utf-8-sig ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏û‡∏µ‡∏¢‡∏ô
        else:
            df = pd.read_excel(file)
        st.success(f"‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {file.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß") 
        
        #‡πÄ‡∏Å‡πá‡∏ö df ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session_state ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô 
        if "df" not in st.session_state: #‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏∑‡πà‡∏≠ "df" ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô session_state ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            st.session_state.df = df.copy() #‡πÄ‡∏Å‡πá‡∏ö DataFrame (df) ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session_state
        df = st.session_state.df.copy()  #‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô df ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        
        #‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
        st.subheader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥")
        main_option = st.radio("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥", ["‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Missing Value", "‡∏™‡∏£‡πâ‡∏≤‡∏áDummy Variable‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"])
        
        #‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Data Audit
        if main_option == "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô":
            st.subheader("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
            #‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Missing Value
            st.markdown("### 1) ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Missing Value ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Column")
            miss_cnt = df.isna().sum() #‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞ column ‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
            audit_missing = (   #‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Missing Value
                pd.DataFrame({
                    "Column Name": df.columns,
                    "Missing Count(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß)": miss_cnt.values,  
                    "DType": df.dtypes.astype(str).values
                })
                .sort_values("Missing Count(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß)", ascending=False) #‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà Missing ‡πÄ‡∏¢‡∏≠‡∏∞‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô
                .reset_index(drop=True) #‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï index ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0,1,2,... ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏á‡πà‡∏≤‡∏¢
            )
            st.dataframe(audit_missing) #‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Outlier ‡∏î‡πâ‡∏ß‡∏¢ Boxplot
            st.markdown("### 2) Outlier Check(Boxplot)")
            numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist() #‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            if not numeric_cols:
                st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ Boxplot")
            else:
                box_col = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π Boxplot", numeric_cols, key="outlier_box_col")
                fig, ax = plt.subplots(figsize=(6, 4)) #‡∏™‡∏£‡πâ‡∏≤‡∏á Boxplot
                ax.boxplot(df[box_col].dropna(), vert=True, patch_artist=True) #‡∏ï‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô plot
                ax.set_title(f"Boxplot of {box_col}")
                ax.set_ylabel(box_col)
                st.pyplot(fig) #‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Streamlit
                #‡∏´‡∏≤ outlier ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ IQR
                q1 = df[box_col].quantile(0.25)
                q3 = df[box_col].quantile(0.75)
                iqr = q3 - q1
                lower = q1 - 1.5 * iqr
                upper = q3 + 1.5 * iqr
                mask_out = (df[box_col] < lower) | (df[box_col] > upper) #‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô outlier
                outliers = df.loc[mask_out, box_col] #‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ outlier ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                st.write(f"‡∏û‡∏ö outlier ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: **{mask_out.sum()} ‡πÅ‡∏ñ‡∏ß**") #‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô outlier ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ
                if not outliers.empty: # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ outlier‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 50 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                    st.dataframe(outliers.head(50).to_frame())
                    action = st.radio(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Outlier",
                        ("‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Outlier ‡∏ó‡∏¥‡πâ‡∏á", "‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤ Outlier ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô (Median)"),
                        key="outlier_action"
                     )
                    do_process = st.button("‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Outlier", disabled=(mask_out.sum() == 0))
                    if do_process:
                        df_new = df.copy()
            
                        if action == "‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á":
                            before = len(df_new)
                            df_new = df_new.loc[~mask_out].copy()  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà outlier
                            removed = before - len(df_new)
                            st.success(f"üóëÔ∏è ‡∏•‡∏ö Outlier ‡πÅ‡∏•‡πâ‡∏ß {removed} ‡πÅ‡∏ñ‡∏ß")
                        
                        else:  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ median
                            median_val = float(df[box_col].median())
                            n_changed = int(mask_out.sum())
                            df_new.loc[mask_out, box_col] = median_val
                            st.success(f"üßÆ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà Outlier {n_changed} ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå **{box_col}** ‡∏î‡πâ‡∏ß‡∏¢ median = {median_val:g}")
            
                        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ session_state ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                        st.session_state.df = df_new.copy()
                        df = df_new  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ df ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡∏î‡πÄ‡∏à‡πá‡∏ï‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
                        st.dataframe(df.head(50))
                else:
                    st.info("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ Outlier ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ")
             

            #Range Check
            st.markdown("### 3) Range Check (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á)")
            if not numeric_cols:  #‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏°‡∏±‡πâ‡∏¢
                st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Range Check")
            else:
                rng_col = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡πà‡∏ß‡∏á", numeric_cols, key="range_col")
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NaN (‡∏Å‡∏±‡∏ô error)
                current_min = float(pd.to_numeric(df[rng_col], errors="coerce").min())
                current_max = float(pd.to_numeric(df[rng_col], errors="coerce").max())
                #‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                c1, c2 = st.columns(2)
                with c1:
                    user_min = st.number_input("‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", value=current_min, key="user_min")
                with c2:
                    user_max = st.number_input("‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", value=current_max, key="user_max")
                if user_min > user_max:
                    st.error("‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
                else:
                    rng_mask = (df[rng_col] < user_min) | (df[rng_col] > user_max) #‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á
                    out_of_range = df[rng_mask]
                    st.write(f"‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á [{user_min}, {user_max}]: **{rng_mask.sum()} ‡πÅ‡∏ñ‡∏ß**") #‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á
                    if not out_of_range.empty:
                        st.dataframe(out_of_range[[rng_col]].head(50))
                        #‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á
                        if st.button(f"üóëÔ∏è ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {rng_col}"):
                            before = len(df) #‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
                            df = df.loc[~rng_mask].copy() #‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á
                            removed = before - len(df) #‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
                            st.success(f"‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏•‡πâ‡∏ß {removed} ‡πÅ‡∏ñ‡∏ß")
                            st.session_state.df = df.copy() #‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï st.session_state.df
                            st.dataframe(df.head(50)) #‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à

        #‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Missing Value
        elif main_option == "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Missing Value":
            st.subheader("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Missing Value")   
            #‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ missing
            missing_counts = df.isnull().sum() #‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤ missing value
            missing_cols = missing_counts[missing_counts > 0].index.tolist() #‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ Missing
            if len(missing_cols) == 0:
                st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö Missing Values ‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ")
            else:
                st.write("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Missing ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
                #‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏£‡∏∏‡∏õ Missing + dtype
                missing_df = pd.DataFrame({
                    "Column Name": missing_cols,
                    "Data Type": [df[col].dtype for col in missing_cols],
                    "Missing Count": [missing_counts[col] for col in missing_cols]
                })
                st.dataframe(missing_df)  #‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
                #‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
                selected_cols = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing",options=missing_cols)
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Clean ‡∏ï‡∏≤‡∏° dtype ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å dtype
                method_options = [
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ...",
                    "‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà Missing ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)",    
                    "‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ Missing Value ‡∏î‡πâ‡∏ß‡∏¢ Mode",
                ]
                # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì ‡πÉ‡∏ä‡πâ Mean/Median
                if selected_cols and all(np.issubdtype(df[col].dtype, np.number) for col in selected_cols):
                    method_options += [
                        "‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ Missing Value ‡∏î‡πâ‡∏ß‡∏¢ Mean",
                        "‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ Missing Value ‡∏î‡πâ‡∏ß‡∏¢ Median",
                    ]
                method = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing", method_options)
                #‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
                if st.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"):
                    if not selected_cols:   
                        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Å‡πà‡∏≠‡∏ô")
                    elif method == "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ...":
                        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing ‡∏Å‡πà‡∏≠‡∏ô")
                    else:
                        #copy ‡πÑ‡∏ß‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
                        df_before = df.copy()
                        # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                        for col in selected_cols:
                            if method == "‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà Missing ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)":
                                df = df.dropna(subset=[col])
                            elif method == "‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ Missing Value ‡∏î‡πâ‡∏ß‡∏¢ Mode":
                                mode_val = df[col].mode(dropna=True)
                                if len(mode_val) > 0:
                                    df[col] = df[col].fillna(mode_val.iloc[0])
                            elif method == "‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ Missing Value ‡∏î‡πâ‡∏ß‡∏¢ Mean":
                                if np.issubdtype(df[col].dtype, np.number):
                                    df[col] = df[col].fillna(df[col].mean())
                            elif method == "‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ Missing Value ‡∏î‡πâ‡∏ß‡∏¢ Median":
                                if np.issubdtype(df[col].dtype, np.number):
                                    df[col] = df[col].fillna(df[col].median())
                        st.success("‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing Values ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                        #‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session_state
                        st.session_state.df = df.copy()
                        #‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏ñ‡∏π‡∏Å‡∏•‡∏ö 
                        if method == "‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà Missing ‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)":
                            removed_rows = df_before[df_before[selected_cols].isna().any(axis=1)]
                            st.header("‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ Missing")
                            if removed_rows.empty:
                                st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö")
                            else:
                                # ‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                                st.dataframe(removed_rows[selected_cols] if selected_cols else removed_rows)
                        else:
                            filled_mask = (df_before[selected_cols].isna()) & (df[selected_cols].notna())
                            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                            changed_idx = filled_mask.any(axis=1)
                            st.header("‚úèÔ∏è ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ Missing ‡πÅ‡∏•‡πâ‡∏ß)")
                            if not changed_idx.any():
                                st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ Missing")
                            else:
                                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ ‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏•‡∏±‡∏á ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
                                before_part = df_before.loc[changed_idx, selected_cols].add_suffix(" (‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥)")
                                after_part  = df.loc[changed_idx, selected_cols].add_suffix(" (‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥)")
                                diff_view = pd.concat([before_part, after_part], axis=1)
                                st.dataframe(diff_view)
                                    
        #‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏áData Transform
        elif main_option == "‡∏™‡∏£‡πâ‡∏≤‡∏áDummy Variable‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
            st.subheader("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            transform_option = st.radio(
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥",
            [
                "Dummy Variable",
                "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Type Conversion)"
            ]
        )
            #Dummy Variable
            if transform_option == "Dummy Variable":
                st.markdown("**üî∏ ‡∏™‡∏£‡πâ‡∏≤‡∏á Dummy Variable**")
                # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô object
                object_cols = df.select_dtypes(include=['object']).columns.tolist()
                if not object_cols:
                    st.info("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Dummy Variable")
                else:
                    col_to_encode = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå", object_cols)
                    if st.button("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"):
                        # ‡πÉ‡∏ä‡πâ pandas ‡∏™‡∏£‡πâ‡∏≤‡∏á dummy (‡∏ï‡∏±‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏≠‡∏≠‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô drop="first")
                        dummies = pd.get_dummies(df[col_to_encode], prefix=col_to_encode, drop_first=True).astype(int)
                        # ‡∏ï‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå dummy ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö df ‡πÄ‡∏î‡∏¥‡∏°
                        df = pd.concat([df, dummies], axis=1)
                        st.success(f"‚úÖ‡∏ó‡∏≥ Dummy Variable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {col_to_encode} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")                      
                        #‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session_state
                        st.session_state.df = df.copy()                       
                        st.dataframe(df.head()) #‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á DataFrame ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå dummy ‡πÄ‡∏û‡∏¥‡πà‡∏°)

            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Type Conversion)
            elif transform_option == "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Type Conversion)":
                st.markdown("**üî∏ ‡πÅ‡∏õ‡∏•‡∏á Data Type ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å**")

                selected_col = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á", df.columns) 
                dtype_option = st.selectbox(
                    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô",
                    ["int", "float", "string", "date", "number"]
                )
                if st.button("‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
                    try:
                        if dtype_option == 'int':
                            #‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ robust: coercion ‚Üí ‡∏•‡∏ö inf ‚Üí ‡πÉ‡∏ä‡πâ Int64 ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö NA
                            s = pd.to_numeric(df[selected_col], errors='coerce')  # ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç, ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ = NaN
                            df[selected_col] = s.round().astype('Int64') # ‡πÉ‡∏ä‡πâ dtype Int64 ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ NA ‡πÑ‡∏î‡πâ
                        elif dtype_option == 'float':
                            df[selected_col] = df[selected_col].astype(float)
                        elif dtype_option == 'string':
                            df[selected_col] = df[selected_col].astype(str)
                        elif dtype_option == 'date':
                            df[selected_col] = pd.to_datetime(df[selected_col], errors='coerce')
                        elif dtype_option == 'number':
                            df[selected_col] = pd.to_numeric(df[selected_col], errors='coerce')
                        st.success(f"‚úÖ ‡πÅ‡∏õ‡∏•‡∏á {selected_col} ‡πÄ‡∏õ‡πá‡∏ô {dtype_option} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")                       
                        #‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ïsession_state
                        st.session_state.df = df.copy()
                        st.write(df[[selected_col]].head()) #‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á
                        st.write(df[selected_col].dtypes) #‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô
                    except Exception as e:
                        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}") #‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡∏Ç‡∏ì‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        #‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        st.markdown("---")
        st.subheader("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        #‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        base_name = file.name.rsplit(".", 1)[0] if hasattr(file, "name") else "cleaned_data"
        data_bytes = st.session_state.df.to_csv(index=False).encode("utf-8-sig")
        fname = f"{base_name}_cleaned.csv"
        mime = "text/csv"
        st.download_button(
            "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
            data=data_bytes,
            file_name=fname,
            mime=mime,
            use_container_width=True
            )      
    except Exception as e:
         st.error(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
else:
     st.info("‚¨ÜÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .xlsx ‡∏´‡∏£‡∏∑‡∏≠ .csv")










